/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/knative/eventing-contrib/contrib/alitablestore/pkg/apis/sources/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AliTablestoreSourceLister helps list AliTablestoreSource.
type AliTablestoreSourceLister interface {
	// List lists all AliTablestoreSources in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.AliTablestoreSource, err error)
	// AliTablestoreSources returns an object that can list and get AliTablestoreSources.
	AliTablestoreSources(namespace string) AliTablestoreSourceNamespaceLister
	AliTablestoreSourceListerExpansion
}

// alitablesourceSourceLister implements the AliTablestoreSourceLister interface.
type alitablesourceSourceLister struct {
	indexer cache.Indexer
}

// NewAliTablestoreSourceLister returns a new AliTablestoreSourceLister.
func NewAliTablestoreSourceLister(indexer cache.Indexer) AliTablestoreSourceLister {
	return &alitablesourceSourceLister{indexer: indexer}
}

// List lists all AliTablestoreSources in the indexer.
func (s *alitablesourceSourceLister) List(selector labels.Selector) (ret []*v1alpha1.AliTablestoreSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AliTablestoreSource))
	})
	return ret, err
}

// AliTablestoreSources returns an object that can list and get AliTablestoreSources.
func (s *alitablesourceSourceLister) AliTablestoreSources(namespace string) AliTablestoreSourceNamespaceLister {
	return alitablestoreSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AliTablestoreSourceNamespaceLister helps list and get AliTablestoreSources.
type AliTablestoreSourceNamespaceLister interface {
	// List lists all AliTablestoreSources in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.AliTablestoreSource, err error)
	// Get retrieves the AliTablestoreSource from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.AliTablestoreSource, error)
	AliTablestoreSourceNamespaceListerExpansion
}

// alitablestoreSourceNamespaceLister implements the AliTablestoreSourceNamespaceLister
// interface.
type alitablestoreSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AliTablestoreSources in the indexer for a given namespace.
func (s alitablestoreSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AliTablestoreSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AliTablestoreSource))
	})
	return ret, err
}

// Get retrieves the AliTablestoreSource from the indexer for a given namespace and name.
func (s alitablestoreSourceNamespaceLister) Get(name string) (*v1alpha1.AliTablestoreSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("alitablestoresource"), name)
	}
	return obj.(*v1alpha1.AliTablestoreSource), nil
}
